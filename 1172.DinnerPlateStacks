Problem : 

You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.

Implement the DinnerPlates class:

DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity.
void push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity.
int pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.
int popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.


Solution in Java.

class DinnerPlates {
    TreeMap<Integer, Stack<Integer>> dinnerPlateStacks;
    TreeSet<Integer> availableStacks;
    int capacity;
    public DinnerPlates(int capacity) {
        this.capacity = capacity;
        dinnerPlateStacks = new TreeMap<>();
        availableStacks = new TreeSet<>();
    }
    
    public void push(int val) {
        int indexToPushPlate = 0;
        if (availableStacks.isEmpty()) {
            Map.Entry<Integer, Stack<Integer>> e = dinnerPlateStacks.lastEntry(); 
            if (e != null) {
                indexToPushPlate = e.getKey() + 1;
            }
            availableStacks.add(indexToPushPlate);
        }else {
            indexToPushPlate = availableStacks.first();
        }
        
        Stack<Integer> stack = dinnerPlateStacks.getOrDefault(indexToPushPlate, new Stack<>());
        stack.push(val);
        if (stack.size() == capacity) {
            availableStacks.remove(indexToPushPlate);
        }
        dinnerPlateStacks.put(indexToPushPlate, stack);
    }
    
    public int pop() {
        if (dinnerPlateStacks.size() == 0) {
            return -1;
        }
        return popAtStack(dinnerPlateStacks.lastKey());
    }
    
    public int popAtStack(int index) {
        if (!dinnerPlateStacks.containsKey(index)) {
            return -1;
        }
        Stack<Integer> stack = dinnerPlateStacks.get(index);
        int value = stack.pop();
        if (stack.size() == 0) {
            dinnerPlateStacks.remove(index);
        }
        availableStacks.add(index);
        return value;
    }
}

/**
 * Your DinnerPlates object will be instantiated and called as such:
 * DinnerPlates obj = new DinnerPlates(capacity);
 * obj.push(val);
 * int param_2 = obj.pop();
 * int param_3 = obj.popAtStack(index);
 */
